{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "dfdatafactorypractice"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/pl_copy_sales_files')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy Dec File",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ds_param_input",
								"type": "DatasetReference",
								"parameters": {
									"p_inputFileName": "Sales_DEC_2022.csv"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_param_output",
								"type": "DatasetReference",
								"parameters": {
									"p_OutputFileName": "Sales_DEC_2022_op.csv"
								}
							}
						]
					},
					{
						"name": "Copy Dec File_copy1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ds_param_input",
								"type": "DatasetReference",
								"parameters": {
									"p_inputFileName": "Sales_JAN_2023.csv"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_param_output",
								"type": "DatasetReference",
								"parameters": {
									"p_OutputFileName": "Sales_JAN_2023_op.csv"
								}
							}
						]
					},
					{
						"name": "Copy Dec File_copy2",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ds_param_input",
								"type": "DatasetReference",
								"parameters": {
									"p_inputFileName": "Sales_FEB_2023.csv"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_param_output",
								"type": "DatasetReference",
								"parameters": {
									"p_OutputFileName": "Sales_FEB_2023_op.csv"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-07-12T03:08:13Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_deletefilesizeless150')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Metadata Folder",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "GetmetadataFolder",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "ForEachFileinFolder",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get Metadata Folder",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Metadata Folder').output.childItems",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Get Metadata File",
									"type": "GetMetadata",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "GetFilefromGetMetataFolder",
											"type": "DatasetReference",
											"parameters": {
												"InputFileName": {
													"value": "@item().name",
													"type": "Expression"
												}
											}
										},
										"fieldList": [
											"size",
											"lastModified",
											"structure",
											"itemName"
										],
										"storeSettings": {
											"type": "AzureBlobFSReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										},
										"formatSettings": {
											"type": "DelimitedTextReadSettings"
										}
									}
								},
								{
									"name": "If Condition1",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "Get Metadata File",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@greater(activity('Get Metadata File').output.size,150)",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "Delete FIle",
												"type": "Delete",
												"dependsOn": [],
												"policy": {
													"timeout": "0.12:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"dataset": {
														"referenceName": "GetFilefromGetMetataFolder",
														"type": "DatasetReference",
														"parameters": {
															"InputFileName": {
																"value": "@item().name",
																"type": "Expression"
															}
														}
													},
													"enableLogging": false,
													"storeSettings": {
														"type": "AzureBlobFSReadSettings",
														"recursive": true,
														"enablePartitionDiscovery": false
													}
												}
											}
										],
										"ifTrueActivities": [
											{
												"name": "Wait True",
												"type": "Wait",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"waitTimeInSeconds": 1
												}
											}
										]
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-07-12T05:42:02Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_inc_copy_files')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "CopyFIlestoOutput",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"modifiedDatetimeStart": {
										"value": "@adddays(utcNow(),-2)",
										"type": "Expression"
									},
									"modifiedDatetimeEnd": {
										"value": "@utcNow()",
										"type": "Expression"
									},
									"wildcardFileName": "*",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ds_Inccopyfiles",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_IncCopyFilestoTarget",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-07-12T09:49:35Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_salesbyemployeescase2')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "df_employeeSales",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_EmployeeSales",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"sourceEmployee": {},
									"sourceDepartment": {},
									"sourceRegion": {},
									"sourceSalesEAA": {},
									"sourceSalesNA": {},
									"sourceSalesSA": {},
									"sink1": {},
									"employeesalesbyregionSA": {},
									"employeesalesbyregionNA": {},
									"employeesalesbyregionSAA": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-07-14T09:14:24Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/MappingDataflowPractice1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_CustomerSource",
								"type": "DatasetReference"
							},
							"name": "CustomerSource"
						},
						{
							"dataset": {
								"referenceName": "DS_Paymentsource",
								"type": "DatasetReference"
							},
							"name": "PaymentSource"
						},
						{
							"dataset": {
								"referenceName": "DS_ordersource",
								"type": "DatasetReference"
							},
							"name": "OrderSource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DS_PaymentOutput",
								"type": "DatasetReference"
							},
							"name": "OutputPayments"
						}
					],
					"transformations": [
						{
							"name": "StatusFilter"
						},
						{
							"name": "CustomerAgefilter"
						},
						{
							"name": "selectCustomer"
						},
						{
							"name": "selectPayment"
						},
						{
							"name": "selectOrders"
						},
						{
							"name": "joinCustomer"
						},
						{
							"name": "PaymentJoin"
						},
						{
							"name": "select1"
						},
						{
							"name": "pivotDueAmount"
						}
					],
					"scriptLines": [
						"parameters{",
						"     pMinAge as integer,",
						"     pMaxAge as integer",
						"}",
						"source(output(",
						"          customer_id as string,",
						"          Customerslastname as string,",
						"          Customersfirstname as string,",
						"          CustomersCountry as string,",
						"          Customersage as short,",
						"          Customersgender as string,",
						"          Customersemail as string,",
						"          Customersprofession as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> CustomerSource",
						"source(output(",
						"          order_id as string,",
						"          payment_id as string,",
						"          type as string,",
						"          descriptions as string,",
						"          pDate as date 'dd/MM/yyyy',",
						"          Status as string,",
						"          Details as string,",
						"          Total_Invoice as short,",
						"          Due_Amount as double",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> PaymentSource",
						"source(output(",
						"          order_id as string,",
						"          customer_id as string,",
						"          Store_id as string,",
						"          Date as date 'dd/MM/yyyy'",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> OrderSource",
						"PaymentSource filter(Status != 'error' && (not(equals(Status, \"refunded\")))) ~> StatusFilter",
						"CustomerSource filter(Customersage >= $pMinAge && Customersage < $pMaxAge) ~> CustomerAgefilter",
						"CustomerAgefilter select(mapColumn(",
						"          customer_id,",
						"          Customers_First_Name = Customersfirstname,",
						"          Customers_Last_Name = Customerslastname,",
						"          Customers_Country = CustomersCountry,",
						"          Customers_Age = Customersage",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectCustomer",
						"StatusFilter select(mapColumn(",
						"          payment_id,",
						"          order_id,",
						"          Status,",
						"          Due_Amount,",
						"          Total_Invoice",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectPayment",
						"OrderSource select(mapColumn(",
						"          order_id,",
						"          customer_id,",
						"          Date",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectOrders",
						"selectOrders, selectCustomer join(selectOrders@customer_id == selectCustomer@customer_id,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinCustomer",
						"joinCustomer, selectPayment join(selectOrders@order_id == selectPayment@order_id,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> PaymentJoin",
						"PaymentJoin select(mapColumn(",
						"          order_id = selectOrders@order_id,",
						"          Date,",
						"          Customers_First_Name,",
						"          Customers_Last_Name,",
						"          Customers_Country,",
						"          Customers_Age,",
						"          Status,",
						"          Due_Amount,",
						"          Total_Invoice",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 pivot(groupBy(order_id,",
						"          Date,",
						"          Customers_First_Name,",
						"          Customers_Last_Name,",
						"          Customers_Country,",
						"          Customers_Age,",
						"          Total_Invoice),",
						"     pivotBy(Status, ['received', 'not received']),",
						"     Due_Amount_ = sum(Due_Amount),",
						"     columnNaming: '$N$V',",
						"     lateral: true) ~> pivotDueAmount",
						"pivotDueAmount sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['Paymentdetails.csv'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> OutputPayments"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SCDType1DF')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_azuresqldbsourcetable",
								"type": "DatasetReference"
							},
							"name": "source1"
						},
						{
							"dataset": {
								"referenceName": "ds_azuresqltargettableuser",
								"type": "DatasetReference"
							},
							"name": "Deistination"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_azuresqltargettableuser",
								"type": "DatasetReference"
							},
							"name": "sink1"
						},
						{
							"dataset": {
								"referenceName": "ds_azuresqltargettableuser",
								"type": "DatasetReference"
							},
							"name": "sink2"
						}
					],
					"transformations": [
						{
							"name": "existsOrNot"
						},
						{
							"name": "exists1"
						},
						{
							"name": "alterRow1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Key as integer,",
						"          Name as string,",
						"          Phone as string,",
						"          Last_m as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> source1",
						"source(output(",
						"          Key as integer,",
						"          Name as string,",
						"          Phone as string,",
						"          Last_m as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> Deistination",
						"source1, Deistination exists(source1@Key == Deistination@Key,",
						"     negate:true,",
						"     broadcast: 'auto')~> existsOrNot",
						"source1, Deistination exists(source1@Key == Deistination@Key,",
						"     negate:false,",
						"     broadcast: 'auto')~> exists1",
						"exists1 alterRow(updateIf(true())) ~> alterRow1",
						"existsOrNot sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Key as integer,",
						"          Name as string,",
						"          Phone as string,",
						"          Last_m as date",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          Key,",
						"          Name,",
						"          Phone,",
						"          Last_m",
						"     )) ~> sink1",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Key as integer,",
						"          Name as string,",
						"          Phone as string,",
						"          Last_m as date",
						"     ),",
						"     deletable:false,",
						"     insertable:false,",
						"     updateable:true,",
						"     upsertable:false,",
						"     keys:['Key'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          Key,",
						"          Name,",
						"          Phone,",
						"          Last_m",
						"     )) ~> sink2"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/MDFPractice1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "MDFPractice1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "MappingDataflowPractice1",
								"type": "DataFlowReference",
								"parameters": {
									"pMinAge": {
										"value": "@pipeline().parameters.PL_P_MinAge",
										"type": "Expression"
									},
									"pMaxAge": {
										"value": "@pipeline().parameters.PL_P_MaxAge",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"CustomerSource": {},
									"PaymentSource": {},
									"OrderSource": {},
									"OutputPayments": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"PL_P_MinAge": {
						"type": "int"
					},
					"PL_P_MaxAge": {
						"type": "int"
					}
				},
				"annotations": [],
				"lastPublishTime": "2023-07-14T07:47:19Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/MappingDataflowPractice1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Pl_SCD_Type1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow SCD Imp",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "SCDType1DF",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"Deistination": {},
									"sink1": {},
									"sink2": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-07-12T16:01:07Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/SCDType1DF')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ExecugePLSendEmail')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Execute Pipeline1",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Pl_SCD_Type1",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "SendEmailSuccess",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Execute Pipeline1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://sendemail23021979.azurewebsites.net:443/api/sendemailwf/triggers/When_a_HTTP_request_is_received/invoke?api-version=2022-05-01&sp=%2Ftriggers%2FWhen_a_HTTP_request_is_received%2Frun&sv=1.0&sig=7ar1TTLjhoVAD8d8NEHtqw8sjHZffbeacswaqpUT7nM",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "{\n\"Title\":\"This email form azure data factory\",\n\"Message\":\"Copy data using DF Activity executed Successfully\",\n\"DataFactoryName\":\"@{pipeline().DataFactory}\",\n\"PipelineName\":\"@{pipeline().Pipeline}\",\n\"TriggerName\":\"@{pipeline().TriggerName}\",\n\"Time\":\"@{utcNow()}\"\n}",
								"type": "Expression"
							}
						}
					},
					{
						"name": "SendEmailFailure",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Execute Pipeline1",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://sendemail23021979.azurewebsites.net:443/api/sendemailwf/triggers/When_a_HTTP_request_is_received/invoke?api-version=2022-05-01&sp=%2Ftriggers%2FWhen_a_HTTP_request_is_received%2Frun&sv=1.0&sig=7ar1TTLjhoVAD8d8NEHtqw8sjHZffbeacswaqpUT7nM",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "{\n\"Title\":\"This email form azure data factory\",\n\"Message\":\"Copy data using DF Activity executed Failed\",\n\"DataFactoryName\":\"@{pipeline().DataFactory}\",\n\"PipelineName\":\"@{pipeline().Pipeline}\",\n\"TriggerName\":\"@{pipeline().TriggerName}\",\n\"Time\":\"@{utcNow()}\"\n}",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-07-12T16:15:52Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/Pl_SCD_Type1')]"
			]
		}
	]
}