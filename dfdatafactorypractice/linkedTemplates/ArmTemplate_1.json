{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "dfdatafactorypractice"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/ds_azuresqldb_connection')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "lsazuresqldb",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "SalesLT",
					"table": "Customer"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_azuresqldbsourcetable')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "lsazuresqldb",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "Key",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Name",
						"type": "varchar"
					},
					{
						"name": "Phone",
						"type": "varchar"
					},
					{
						"name": "Last_m",
						"type": "date"
					}
				],
				"typeProperties": {
					"schema": "source",
					"table": "tbluser"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_azuresqlsourceconfig')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "lsazuresqldb",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "TableName",
						"type": "varchar"
					},
					{
						"name": "LastLoadDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "source",
					"table": "tblControl"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_azuresqltargettableuser')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "lsazuresqldb",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "Key",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Name",
						"type": "varchar"
					},
					{
						"name": "Phone",
						"type": "varchar"
					},
					{
						"name": "Last_m",
						"type": "date"
					}
				],
				"typeProperties": {
					"schema": "target",
					"table": "userData"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_githubfile')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage2",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "ordersgithub.csv",
						"fileSystem": "output"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_param_input')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_inputparam",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"p_inputFileName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().p_inputFileName",
							"type": "Expression"
						},
						"fileSystem": "input"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Order Date",
						"type": "String"
					},
					{
						"name": "Customer First Name",
						"type": "String"
					},
					{
						"name": "Customer Last Name",
						"type": "String"
					},
					{
						"name": "Post Code",
						"type": "String"
					},
					{
						"name": "Region",
						"type": "String"
					},
					{
						"name": "Region Code",
						"type": "String"
					},
					{
						"name": "Product",
						"type": "String"
					},
					{
						"name": "Quantity",
						"type": "String"
					},
					{
						"name": "Sales$",
						"type": "String"
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_param_output')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_param_output",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"p_OutputFileName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().p_OutputFileName",
							"type": "Expression"
						},
						"fileSystem": "output"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/webgithub')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "HttpServer1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "HttpServerLocation",
						"relativeUrl": "mkalvakuntlacelito/igmbiodevrepository/raw/main/Orders.csv"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_EmployeeSales')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "AzureDataLakeStorage2",
								"type": "LinkedServiceReference"
							},
							"name": "sourceEmployee"
						},
						{
							"linkedService": {
								"referenceName": "AzureDataLakeStorage2",
								"type": "LinkedServiceReference"
							},
							"name": "sourceDepartment"
						},
						{
							"linkedService": {
								"referenceName": "AzureDataLakeStorage2",
								"type": "LinkedServiceReference"
							},
							"name": "sourceRegion"
						},
						{
							"linkedService": {
								"referenceName": "AzureDataLakeStorage2",
								"type": "LinkedServiceReference"
							},
							"name": "sourceSalesEAA"
						},
						{
							"linkedService": {
								"referenceName": "AzureDataLakeStorage2",
								"type": "LinkedServiceReference"
							},
							"name": "sourceSalesNA"
						},
						{
							"linkedService": {
								"referenceName": "AzureDataLakeStorage2",
								"type": "LinkedServiceReference"
							},
							"name": "sourceSalesSA"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "AzureDataLakeStorage2",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						},
						{
							"linkedService": {
								"referenceName": "AzureDataLakeStorage2",
								"type": "LinkedServiceReference"
							},
							"name": "employeesalesbyregionSA"
						},
						{
							"linkedService": {
								"referenceName": "AzureDataLakeStorage2",
								"type": "LinkedServiceReference"
							},
							"name": "employeesalesbyregionNA"
						},
						{
							"linkedService": {
								"referenceName": "AzureDataLakeStorage2",
								"type": "LinkedServiceReference"
							},
							"name": "employeesalesbyregionSAA"
						}
					],
					"transformations": [
						{
							"name": "unionsaleseaana"
						},
						{
							"name": "unionwithsa"
						},
						{
							"name": "unpivotsalesbyyear"
						},
						{
							"name": "derivedColumnSalesYear"
						},
						{
							"name": "EmployeeDervieNewColumns"
						},
						{
							"name": "selectemployeecolumns"
						},
						{
							"name": "selectDepartment"
						},
						{
							"name": "selectRegion"
						},
						{
							"name": "lookupwithDepartment"
						},
						{
							"name": "lookupwithRegion"
						},
						{
							"name": "EmployeejoinwithSales"
						},
						{
							"name": "selectemployeesales"
						},
						{
							"name": "aggregateSalesbyEmployee"
						},
						{
							"name": "aggregateEmployessbyYear"
						},
						{
							"name": "split1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Employee_id as integer,",
						"          store_id as string,",
						"          department_id as integer,",
						"          firstname as string,",
						"          lastname as string,",
						"          Country as string,",
						"          age as integer,",
						"          gender as string,",
						"          email as string,",
						"          phone as long",
						"     ),",
						"     useSchema: false,",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delimited',",
						"     fileSystem: 'input',",
						"     folderPath: 'usecase2',",
						"     fileName: 'Employee.csv',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true) ~> sourceEmployee",
						"source(output(",
						"          department_id as integer,",
						"          Department as string,",
						"          Phone as integer,",
						"          Email as string",
						"     ),",
						"     useSchema: false,",
						"     allowSchemaDrift: true,",
						"     validateSchema: true,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delimited',",
						"     fileSystem: 'input',",
						"     folderPath: 'usecase2',",
						"     fileName: 'Department.csv',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true) ~> sourceDepartment",
						"source(output(",
						"          region_id as integer,",
						"          region as string",
						"     ),",
						"     useSchema: false,",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delimited',",
						"     fileSystem: 'input',",
						"     folderPath: 'usecase2',",
						"     fileName: 'Region.csv',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true) ~> sourceRegion",
						"source(output(",
						"          Employee_id as integer,",
						"          Sales_2018 as integer,",
						"          Sales_2019 as integer,",
						"          Sales_2020 as integer,",
						"          Sales_2021 as integer,",
						"          Sales_2022 as integer,",
						"          Sales_2023 as integer",
						"     ),",
						"     useSchema: false,",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delimited',",
						"     fileSystem: 'input',",
						"     folderPath: 'usecase2',",
						"     fileName: 'Sales_EAA.csv',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true) ~> sourceSalesEAA",
						"source(output(",
						"          Employee_id as integer,",
						"          Sales_2018 as integer,",
						"          Sales_2019 as integer,",
						"          Sales_2020 as integer,",
						"          Sales_2021 as integer,",
						"          Sales_2022 as integer,",
						"          Sales_2023 as integer",
						"     ),",
						"     useSchema: false,",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delimited',",
						"     fileSystem: 'input',",
						"     folderPath: 'usecase2',",
						"     fileName: 'Sales_NA.csv',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true) ~> sourceSalesNA",
						"source(output(",
						"          Employee_id as integer,",
						"          Sales_2018 as integer,",
						"          Sales_2019 as integer,",
						"          Sales_2020 as integer,",
						"          Sales_2021 as integer,",
						"          Sales_2022 as integer,",
						"          Sales_2023 as integer",
						"     ),",
						"     useSchema: false,",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delimited',",
						"     fileSystem: 'input',",
						"     folderPath: 'usecase2',",
						"     fileName: 'Sales_SA.csv',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true) ~> sourceSalesSA",
						"sourceSalesEAA, sourceSalesNA union(byName: true)~> unionsaleseaana",
						"unionsaleseaana, sourceSalesSA union(byName: false)~> unionwithsa",
						"unionwithsa unpivot(output(",
						"          Year as string,",
						"          Sales as integer",
						"     ),",
						"     ungroupBy(Employee_id),",
						"     lateral: true,",
						"     ignoreNullPivots: false) ~> unpivotsalesbyyear",
						"unpivotsalesbyyear derive(SalesYear = toInteger(right(Year,4))) ~> derivedColumnSalesYear",
						"sourceEmployee derive(Employee_Full_Name = concat(firstname,' ',lastname),",
						"          Employee_Country = split(Country, ', ')[1],",
						"          Employee_Region_ID = split(Country, ', ')[2]) ~> EmployeeDervieNewColumns",
						"EmployeeDervieNewColumns select(mapColumn(",
						"          Employee_id,",
						"          department_id,",
						"          Employee_Full_Name,",
						"          Employee_Country,",
						"          Employee_Region_ID",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectemployeecolumns",
						"sourceDepartment select(mapColumn(",
						"          department_id,",
						"          Department",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectDepartment",
						"sourceRegion select(mapColumn(",
						"          Employee_Region_ID = region_id,",
						"          Employee_Region = region",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectRegion",
						"selectemployeecolumns, selectDepartment lookup(selectemployeecolumns@department_id == selectDepartment@department_id,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> lookupwithDepartment",
						"lookupwithDepartment, selectRegion lookup(toInteger(selectemployeecolumns@Employee_Region_ID) == selectRegion@Employee_Region_ID,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> lookupwithRegion",
						"lookupwithRegion, derivedColumnSalesYear join(selectemployeecolumns@Employee_id == unpivotsalesbyyear@Employee_id,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> EmployeejoinwithSales",
						"EmployeejoinwithSales select(mapColumn(",
						"          Employee_id = selectemployeecolumns@Employee_id,",
						"          Employee_Full_Name,",
						"          Employee_Country,",
						"          Employee_Region,",
						"          Sales,",
						"          SalesYear",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectemployeesales",
						"selectemployeesales aggregate(groupBy(Employee_Full_Name,",
						"          Employee_id,",
						"          Employee_Country,",
						"          Employee_Region),",
						"     TotalSales = sum(Sales),",
						"          MaxSales = max(Sales),",
						"          MinSales = min(Sales),",
						"          AvgSales = avg(Sales)) ~> aggregateSalesbyEmployee",
						"selectemployeesales aggregate(groupBy(Employee_Full_Name,",
						"          Employee_id,",
						"          SalesYear),",
						"     TotalSales = sum(Sales),",
						"          MaxSales = max(Sales),",
						"          MinSales = min(Sales),",
						"          AvgSales = avg(Sales)) ~> aggregateEmployessbyYear",
						"aggregateSalesbyEmployee split(Employee_Region == 'South America',",
						"     Employee_Region == 'North America',",
						"     disjoint: false) ~> split1@(SummaryEmployeeSalesbySA, SummaryEmployeeSalesbyNA, SummaryEmployeeSalesbyEAA)",
						"aggregateEmployessbyYear sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delimited',",
						"     fileSystem: 'output',",
						"     folderPath: 'TotalSalesByYear.csv',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink1",
						"split1@SummaryEmployeeSalesbySA sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delimited',",
						"     fileSystem: 'output',",
						"     folderPath: 'EmployeeSalesSA.csv',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> employeesalesbyregionSA",
						"split1@SummaryEmployeeSalesbyNA sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delimited',",
						"     fileSystem: 'output',",
						"     folderPath: 'EmployeeSalesNA.csv',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> employeesalesbyregionNA",
						"split1@SummaryEmployeeSalesbyEAA sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delimited',",
						"     fileSystem: 'output',",
						"     folderPath: 'EmployeeSalesEAA.csv',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> employeesalesbyregionSAA"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Lookup Demo')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "LookupReadAzureSQLCusomterdata",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "select CustomerID,\nNameStyle,\nTitle,\nFirstName\nFrom SalesLT.Customer",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ds_azuresqldb_connection",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-07-12T06:14:44Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_azuresqldb_connection')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Lookup Foreach Demo')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "LookupYear",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[dbo].[salesYear]",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ds_azuresqldb_connection",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "For Each Year",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "LookupYear",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('LookupYear').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Copy data from SQL to ADLS by Year",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderStoredProcedureName": "[[dbo].[Salesin]",
											"storedProcedureParameters": {
												"Per_year": {
													"type": "Int32",
													"value": {
														"value": "@item().Year",
														"type": "Expression"
													}
												}
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "ds_azuresqldb_connection",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "DS_AzureDataLakeCSV",
											"type": "DatasetReference",
											"parameters": {
												"Name": {
													"value": "@concat('Sales_in_',item().Year,'.csv')",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-07-12T06:59:02Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_azuresqldb_connection')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Pl_SQL_Copydata')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "FULL Load",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ds_azuresqldbsourcetable",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_azuresqltargettableuser",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-07-12T10:23:06Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_azuresqldbsourcetable')]",
				"[concat(variables('factoryId'), '/datasets/ds_azuresqltargettableuser')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/copy_dec_data')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "setInputVariable",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set outputvairable",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"additionalColumns": [
									{
										"name": "pipelinename",
										"value": {
											"value": "@pipeline().Pipeline",
											"type": "Expression"
										}
									},
									{
										"name": "pipelinerunid",
										"value": {
											"value": "@pipeline().RunId",
											"type": "Expression"
										}
									}
								],
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "Order Date",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Order Date",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "Customer First Name",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Customer First Name",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "Customer Last Name",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Customer Last Name",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "Post Code",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Post Code",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "Region",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Region",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "Region Code",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Region Code",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "Product",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Product",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "Quantity",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Quantity",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "Sales$",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Sales$",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "pipelinename",
											"type": "String"
										},
										"sink": {
											"name": "pipelinename",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "pipelinerunid",
											"type": "String"
										},
										"sink": {
											"name": "pipelinerunid",
											"type": "String",
											"physicalType": "String"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ds_param_input",
								"type": "DatasetReference",
								"parameters": {
									"p_inputFileName": "Sales_DEC_2022.csv"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_param_output",
								"type": "DatasetReference",
								"parameters": {
									"p_OutputFileName": "Sales_DEC_2022.csv"
								}
							}
						]
					},
					{
						"name": "setInputVariable",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "pl_inputfilename",
							"value": {
								"value": "'dec'",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set outputvairable",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "pl_outputfilename",
							"value": {
								"value": "'dec.csv'",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set input variable1",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Copy data1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "pl_inputfilename",
							"value": {
								"value": "'dec2'",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"pl_inputfilename": {
						"type": "String"
					},
					"pl_outputfilename": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2023-07-12T03:45:12Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_param_input')]",
				"[concat(variables('factoryId'), '/datasets/ds_param_output')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/copy_dec_data_use_variables')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "setInputVariable",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set outputvairable",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"additionalColumns": [
									{
										"name": "pipelinename",
										"value": {
											"value": "@pipeline().Pipeline",
											"type": "Expression"
										}
									},
									{
										"name": "pipelinerunid",
										"value": {
											"value": "@pipeline().RunId",
											"type": "Expression"
										}
									}
								],
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "Order Date",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Order Date",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "Customer First Name",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Customer First Name",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "Customer Last Name",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Customer Last Name",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "Post Code",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Post Code",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "Region",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Region",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "Region Code",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Region Code",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "Product",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Product",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "Quantity",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Quantity",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "Sales$",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Sales$",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "pipelinename",
											"type": "String"
										},
										"sink": {
											"name": "pipelinename",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "pipelinerunid",
											"type": "String"
										},
										"sink": {
											"name": "pipelinerunid",
											"type": "String",
											"physicalType": "String"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ds_param_input",
								"type": "DatasetReference",
								"parameters": {
									"p_inputFileName": {
										"value": "@variables('pl_inputfilename')",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_param_output",
								"type": "DatasetReference",
								"parameters": {
									"p_OutputFileName": {
										"value": "@variables('pl_outputfilename')",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "setInputVariable",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "pl_inputfilename",
							"value": {
								"value": "@concat('Sales_',\npipeline().parameters.pl_param_month,'_',\npipeline().parameters.pl_param_year,'.csv'\n)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set outputvairable",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "pl_outputfilename",
							"value": {
								"value": "@concat('Sales_',\r\npipeline().parameters.pl_param_month,'_',pipeline().parameters.pl_param_year,'_op.csv')\r\n",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set input variable1",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Copy data1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "pl_inputfilename",
							"value": {
								"value": "'dec2'",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"pl_param_month": {
						"type": "string"
					},
					"pl_param_year": {
						"type": "string"
					}
				},
				"variables": {
					"pl_inputfilename": {
						"type": "String"
					},
					"pl_outputfilename": {
						"type": "String"
					}
				},
				"annotations": [
					"Sales"
				],
				"lastPublishTime": "2023-07-12T04:04:03Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_param_input')]",
				"[concat(variables('factoryId'), '/datasets/ds_param_output')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/getMetadata')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Metadata Folder prop",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "Wait1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "GetmetadataFolder",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"itemName",
								"itemType",
								"lastModified",
								"exists",
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "Get Metadata File properties",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "Get Metadata Folder prop",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "Getmedatafile",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"columnCount",
								"exists",
								"itemName",
								"itemType",
								"lastModified",
								"size",
								"structure"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "Wait1",
						"type": "Wait",
						"dependsOn": [
							{
								"activity": "Delete Sales_SA File",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"waitTimeInSeconds": 10
						}
					},
					{
						"name": "ForEach input file",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get Metadata Folder prop",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Metadata Folder prop').output.childItems",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Wait for 2 sec",
									"type": "Wait",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"waitTimeInSeconds": 1
									}
								}
							]
						}
					},
					{
						"name": "If file size condi",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Get Metadata File properties",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@less(activity('Get Metadata File properties').output.size,200)",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Wait False",
									"type": "Wait",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"waitTimeInSeconds": 2
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "Wait True",
									"type": "Wait",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"waitTimeInSeconds": 1
									}
								}
							]
						}
					},
					{
						"name": "Delete Sales_SA File",
						"type": "Delete",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "Getmedatafile",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-07-12T05:13:48Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeline1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "get max modified date table user",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "Select max([Last_m]) as Last_m\nfrom source.tbluser",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ds_azuresqldbsourcetable",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "get last laoded table control",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "select [LastLoadDate] as LastLoadDate\nfrom source.tblControl",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ds_azuresqlsourceconfig",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Inc copy",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "get max modified date table user",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "get last laoded table control",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "select * from source.tbluser\nwhere last_m <= '@{activity('get max modified date table user').output.firstRow.Last_m}'\nAnd Last_m >'@{activity('get last laoded table control').output.firstRow.LastLoadDate}'",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ds_azuresqldbsourcetable",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_azuresqltargettableuser",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Stored procedure1",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Inc copy",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[source].[SPUpdateLoadInfo]",
							"storedProcedureParameters": {
								"ModifiedDate": {
									"value": {
										"value": "@{activity('get max modified date table user').output.firstRow.Last_m}",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"TableName": {
									"value": {
										"value": "'source.tbluser'",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "lsazuresqldb",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-07-12T10:38:32Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_azuresqldbsourcetable')]",
				"[concat(variables('factoryId'), '/datasets/ds_azuresqlsourceconfig')]",
				"[concat(variables('factoryId'), '/datasets/ds_azuresqltargettableuser')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeline2')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "HttpReadSettings",
									"requestMethod": "GET"
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "webgithub",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_githubfile",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-07-14T12:31:41Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/webgithub')]",
				"[concat(variables('factoryId'), '/datasets/ds_githubfile')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_GetmetadataDB')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Metadata SQLDBTable",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ds_azuresqldb_connection",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"exists",
								"columnCount",
								"structure"
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-07-12T06:08:32Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_azuresqldb_connection')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_copy_data')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ds_param_input",
								"type": "DatasetReference",
								"parameters": {
									"p_inputFileName": {
										"value": "@pipeline().parameters.plparam_inputfile",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_param_output",
								"type": "DatasetReference",
								"parameters": {
									"p_OutputFileName": {
										"value": "@pipeline().parameters.plparam_outputfile",
										"type": "Expression"
									}
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"plparam_inputfile": {
						"type": "string"
					},
					"plparam_outputfile": {
						"type": "string"
					}
				},
				"annotations": [],
				"lastPublishTime": "2023-07-12T03:29:26Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_param_input')]",
				"[concat(variables('factoryId'), '/datasets/ds_param_output')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_copy_sales_files')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy Dec File",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ds_param_input",
								"type": "DatasetReference",
								"parameters": {
									"p_inputFileName": "Sales_DEC_2022.csv"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_param_output",
								"type": "DatasetReference",
								"parameters": {
									"p_OutputFileName": "Sales_DEC_2022_op.csv"
								}
							}
						]
					},
					{
						"name": "Copy Dec File_copy1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ds_param_input",
								"type": "DatasetReference",
								"parameters": {
									"p_inputFileName": "Sales_JAN_2023.csv"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_param_output",
								"type": "DatasetReference",
								"parameters": {
									"p_OutputFileName": "Sales_JAN_2023_op.csv"
								}
							}
						]
					},
					{
						"name": "Copy Dec File_copy2",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ds_param_input",
								"type": "DatasetReference",
								"parameters": {
									"p_inputFileName": "Sales_FEB_2023.csv"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_param_output",
								"type": "DatasetReference",
								"parameters": {
									"p_OutputFileName": "Sales_FEB_2023_op.csv"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-07-12T03:08:13Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_param_input')]",
				"[concat(variables('factoryId'), '/datasets/ds_param_output')]"
			]
		}
	]
}